#![allow(dead_code, non_camel_case_types)]

extern crate libc;

#[link(name="event")]
extern "C" {}

pub const EVLOOP_ONCE: ::libc::c_uint = 0x01;
pub const EVLOOP_NONBLOCK: ::libc::c_uint = 0x02;
pub const EVLOOP_NO_EXIT_ON_EMPTY: ::libc::c_uint = 0x04;

/* automatically generated by rust-bindgen */

pub enum Struct_sockaddr { }
pub enum Struct_event { }
pub enum Struct_event_base { }
pub enum Struct_event_config { }
pub enum Struct_bufferevent { }
pub enum Struct_timeval { }
pub type Enum_event_method_feature = ::libc::c_uint;
pub const EV_FEATURE_ET: ::libc::c_uint = 1;
pub const EV_FEATURE_O1: ::libc::c_uint = 2;
pub const EV_FEATURE_FDS: ::libc::c_uint = 4;
pub type Enum_event_base_config_flag = ::libc::c_uint;
pub const EVENT_BASE_FLAG_NOLOCK: ::libc::c_uint = 1;
pub const EVENT_BASE_FLAG_IGNORE_ENV: ::libc::c_uint = 2;
pub const EVENT_BASE_FLAG_STARTUP_IOCP: ::libc::c_uint = 4;
pub const EVENT_BASE_FLAG_NO_CACHE_TIME: ::libc::c_uint = 8;
pub const EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST: ::libc::c_uint = 16;
pub type event_log_cb =
    ::std::option::Option<extern "C" fn(severity: ::libc::c_int,
                                        msg: *const ::libc::c_char) -> ()>;
pub type event_fatal_cb =
    ::std::option::Option<extern "C" fn(err: ::libc::c_int) -> ()>;
pub type event_callback_fn =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                        arg2: ::libc::c_short,
                                        arg3: *mut ::libc::c_void) -> ()>;
pub enum Struct_evbuffer { }
pub type bufferevent_data_cb =
    ::std::option::Option<extern "C" fn(bev: *mut Struct_bufferevent,
                                        ctx: *mut ::libc::c_void) -> ()>;
pub type bufferevent_event_cb =
    ::std::option::Option<extern "C" fn(bev: *mut Struct_bufferevent,
                                        what: ::libc::c_short,
                                        ctx: *mut ::libc::c_void) -> ()>;
pub type Enum_bufferevent_options = ::libc::c_uint;
pub const BEV_OPT_CLOSE_ON_FREE: ::libc::c_uint = 1;
pub const BEV_OPT_THREADSAFE: ::libc::c_uint = 2;
pub const BEV_OPT_DEFER_CALLBACKS: ::libc::c_uint = 4;
pub const BEV_OPT_UNLOCK_CALLBACKS: ::libc::c_uint = 8;
pub enum Struct_evdns_base { }
pub type Enum_bufferevent_flush_mode = ::libc::c_uint;
pub const BEV_NORMAL: ::libc::c_uint = 0;
pub const BEV_FLUSH: ::libc::c_uint = 1;
pub const BEV_FINISHED: ::libc::c_uint = 2;
pub type Enum_bufferevent_filter_result = ::libc::c_uint;
pub const BEV_OK: ::libc::c_uint = 0;
pub const BEV_NEED_MORE: ::libc::c_uint = 1;
pub const BEV_ERROR: ::libc::c_uint = 2;
pub type bufferevent_filter_cb =
    ::std::option::Option<extern "C" fn(src: *mut Struct_evbuffer,
                                        dst: *mut Struct_evbuffer,
                                        dst_limit: ::libc::ssize_t,
                                        mode: Enum_bufferevent_flush_mode,
                                        ctx: *mut ::libc::c_void)
                              -> Enum_bufferevent_filter_result>;
pub enum Struct_ev_token_bucket_cfg { }
pub enum Struct_bufferevent_rate_limit_group { }
extern "C" {
    pub fn event_enable_debug_mode() -> ();
    pub fn event_debug_unassign(arg1: *mut Struct_event) -> ();
    pub fn event_base_new() -> *mut Struct_event_base;
    pub fn event_reinit(base: *mut Struct_event_base) -> ::libc::c_int;
    pub fn event_base_dispatch(arg1: *mut Struct_event_base) -> ::libc::c_int;
    pub fn event_base_get_method(arg1: *const Struct_event_base)
     -> *const ::libc::c_char;
    pub fn event_get_supported_methods() -> *mut *const ::libc::c_char;
    pub fn event_config_new() -> *mut Struct_event_config;
    pub fn event_config_free(cfg: *mut Struct_event_config) -> ();
    pub fn event_config_avoid_method(cfg: *mut Struct_event_config,
                                     method: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn event_base_get_features(base: *const Struct_event_base)
     -> ::libc::c_int;
    pub fn event_config_require_features(cfg: *mut Struct_event_config,
                                         feature: ::libc::c_int)
     -> ::libc::c_int;
    pub fn event_config_set_flag(cfg: *mut Struct_event_config,
                                 flag: ::libc::c_int) -> ::libc::c_int;
    pub fn event_config_set_num_cpus_hint(cfg: *mut Struct_event_config,
                                          cpus: ::libc::c_int)
     -> ::libc::c_int;
    pub fn event_base_new_with_config(arg1: *const Struct_event_config)
     -> *mut Struct_event_base;
    pub fn event_base_free(arg1: *mut Struct_event_base) -> ();
    pub fn event_set_log_callback(cb: event_log_cb) -> ();
    pub fn event_set_fatal_callback(cb: event_fatal_cb) -> ();
    pub fn event_base_set(arg1: *mut Struct_event_base,
                          arg2: *mut Struct_event) -> ::libc::c_int;
    pub fn event_base_loop(arg1: *mut Struct_event_base, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn event_base_loopexit(arg1: *mut Struct_event_base,
                               arg2: *const Struct_timeval) -> ::libc::c_int;
    pub fn event_base_loopbreak(arg1: *mut Struct_event_base)
     -> ::libc::c_int;
    pub fn event_base_got_exit(arg1: *mut Struct_event_base) -> ::libc::c_int;
    pub fn event_base_got_break(arg1: *mut Struct_event_base)
     -> ::libc::c_int;
    pub fn event_new(arg1: *mut Struct_event_base, arg2: ::libc::c_int,
                     arg3: ::libc::c_short, arg4: event_callback_fn,
                     arg5: *mut ::libc::c_void) -> *mut Struct_event;
    pub fn event_assign(arg1: *mut Struct_event, arg2: *mut Struct_event_base,
                        arg3: ::libc::c_int, arg4: ::libc::c_short,
                        arg5: event_callback_fn, arg6: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn event_free(arg1: *mut Struct_event) -> ();
    pub fn event_base_once(arg1: *mut Struct_event_base, arg2: ::libc::c_int,
                           arg3: ::libc::c_short, arg4: event_callback_fn,
                           arg5: *mut ::libc::c_void,
                           arg6: *const Struct_timeval) -> ::libc::c_int;
    pub fn event_add(ev: *mut Struct_event, timeout: *const Struct_timeval)
     -> ::libc::c_int;
    pub fn event_del(arg1: *mut Struct_event) -> ::libc::c_int;
    pub fn event_active(ev: *mut Struct_event, res: ::libc::c_int,
                        ncalls: ::libc::c_short) -> ();
    pub fn event_pending(ev: *const Struct_event, events: ::libc::c_short,
                         tv: *mut Struct_timeval) -> ::libc::c_int;
    pub fn event_initialized(ev: *const Struct_event) -> ::libc::c_int;
    pub fn event_get_fd(ev: *const Struct_event) -> ::libc::c_int;
    pub fn event_get_base(ev: *const Struct_event) -> *mut Struct_event_base;
    pub fn event_get_events(ev: *const Struct_event) -> ::libc::c_short;
    pub fn event_get_callback(ev: *const Struct_event) -> event_callback_fn;
    pub fn event_get_callback_arg(ev: *const Struct_event)
     -> *mut ::libc::c_void;
    pub fn event_get_assignment(event: *const Struct_event,
                                base_out: *mut *mut Struct_event_base,
                                fd_out: *mut ::libc::c_int,
                                events_out: *mut ::libc::c_short,
                                callback_out: *mut event_callback_fn,
                                arg_out: *mut *mut ::libc::c_void) -> ();
    pub fn event_get_struct_event_size() -> ::libc::size_t;
    pub fn event_get_version() -> *const ::libc::c_char;
    pub fn event_get_version_number() -> u32;
    pub fn event_base_priority_init(arg1: *mut Struct_event_base,
                                    arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn event_priority_set(arg1: *mut Struct_event, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn event_base_init_common_timeout(base: *mut Struct_event_base,
                                          duration: *const Struct_timeval)
     -> *const Struct_timeval;
    pub fn event_set_mem_functions(malloc_fn:
                                       ::std::option::Option<extern "C" fn(sz:
                                                                               ::libc::size_t)
                                                                 ->
                                                                     *mut ::libc::c_void>,
                                   realloc_fn:
                                       ::std::option::Option<extern "C" fn(ptr:
                                                                               *mut ::libc::c_void,
                                                                           sz:
                                                                               ::libc::size_t)
                                                                 ->
                                                                     *mut ::libc::c_void>,
                                   free_fn:
                                       ::std::option::Option<extern "C" fn(ptr:
                                                                               *mut ::libc::c_void)
                                                                 -> ()>)
     -> ();
    pub fn event_base_dump_events(arg1: *mut Struct_event_base,
                                  arg2: *mut ::libc::c_void) -> (); // arg2: *mut FILE
    pub fn event_base_gettimeofday_cached(base: *mut Struct_event_base,
                                          tv: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn bufferevent_socket_new(base: *mut Struct_event_base,
                                  fd: ::libc::c_int, options: ::libc::c_int)
     -> *mut Struct_bufferevent;
    pub fn bufferevent_socket_connect(arg1: *mut Struct_bufferevent,
                                      arg2: *mut Struct_sockaddr,
                                      arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn bufferevent_socket_connect_hostname(arg1: *mut Struct_bufferevent,
                                               arg2: *mut Struct_evdns_base,
                                               arg3: ::libc::c_int,
                                               arg4: *const ::libc::c_char,
                                               arg5: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bufferevent_socket_get_dns_error(bev: *mut Struct_bufferevent)
     -> ::libc::c_int;
    pub fn bufferevent_base_set(base: *mut Struct_event_base,
                                bufev: *mut Struct_bufferevent)
     -> ::libc::c_int;
    pub fn bufferevent_get_base(bev: *mut Struct_bufferevent)
     -> *mut Struct_event_base;
    pub fn bufferevent_priority_set(bufev: *mut Struct_bufferevent,
                                    pri: ::libc::c_int) -> ::libc::c_int;
    pub fn bufferevent_free(bufev: *mut Struct_bufferevent) -> ();
    pub fn bufferevent_setcb(bufev: *mut Struct_bufferevent,
                             readcb: bufferevent_data_cb,
                             writecb: bufferevent_data_cb,
                             eventcb: bufferevent_event_cb,
                             cbarg: *mut ::libc::c_void) -> ();
    pub fn bufferevent_setfd(bufev: *mut Struct_bufferevent,
                             fd: ::libc::c_int) -> ::libc::c_int;
    pub fn bufferevent_getfd(bufev: *mut Struct_bufferevent) -> ::libc::c_int;
    pub fn bufferevent_get_underlying(bufev: *mut Struct_bufferevent)
     -> *mut Struct_bufferevent;
    pub fn bufferevent_write(bufev: *mut Struct_bufferevent,
                             data: *const ::libc::c_void, size: ::libc::size_t)
     -> ::libc::c_int;
    pub fn bufferevent_write_buffer(bufev: *mut Struct_bufferevent,
                                    buf: *mut Struct_evbuffer)
     -> ::libc::c_int;
    pub fn bufferevent_read(bufev: *mut Struct_bufferevent,
                            data: *mut ::libc::c_void, size: ::libc::size_t)
     -> ::libc::size_t;
    pub fn bufferevent_read_buffer(bufev: *mut Struct_bufferevent,
                                   buf: *mut Struct_evbuffer)
     -> ::libc::c_int;
    pub fn bufferevent_get_input(bufev: *mut Struct_bufferevent)
     -> *mut Struct_evbuffer;
    pub fn bufferevent_get_output(bufev: *mut Struct_bufferevent)
     -> *mut Struct_evbuffer;
    pub fn bufferevent_enable(bufev: *mut Struct_bufferevent,
                              event: ::libc::c_short) -> ::libc::c_int;
    pub fn bufferevent_disable(bufev: *mut Struct_bufferevent,
                               event: ::libc::c_short) -> ::libc::c_int;
    pub fn bufferevent_get_enabled(bufev: *mut Struct_bufferevent)
     -> ::libc::c_short;
    pub fn bufferevent_set_timeouts(bufev: *mut Struct_bufferevent,
                                    timeout_read: *const Struct_timeval,
                                    timeout_write: *const Struct_timeval)
     -> ::libc::c_int;
    pub fn bufferevent_setwatermark(bufev: *mut Struct_bufferevent,
                                    events: ::libc::c_short, lowmark: ::libc::size_t,
                                    highmark: ::libc::size_t) -> ();
    pub fn bufferevent_lock(bufev: *mut Struct_bufferevent) -> ();
    pub fn bufferevent_unlock(bufev: *mut Struct_bufferevent) -> ();
    pub fn bufferevent_flush(bufev: *mut Struct_bufferevent,
                             iotype: ::libc::c_short,
                             mode: Enum_bufferevent_flush_mode)
     -> ::libc::c_int;
    pub fn bufferevent_filter_new(underlying: *mut Struct_bufferevent,
                                  input_filter: bufferevent_filter_cb,
                                  output_filter: bufferevent_filter_cb,
                                  options: ::libc::c_int,
                                  free_context:
                                      ::std::option::Option<extern "C" fn(arg1:
                                                                              *mut ::libc::c_void)
                                                                -> ()>,
                                  ctx: *mut ::libc::c_void)
     -> *mut Struct_bufferevent;
    pub fn bufferevent_pair_new(base: *mut Struct_event_base,
                                options: ::libc::c_int,
                                pair: *mut *mut Struct_bufferevent)
     -> ::libc::c_int;
    pub fn bufferevent_pair_get_partner(bev: *mut Struct_bufferevent)
     -> *mut Struct_bufferevent;
    pub fn ev_token_bucket_cfg_new(read_rate: ::libc::size_t, read_burst: ::libc::size_t,
                                   write_rate: ::libc::size_t, write_burst: ::libc::size_t,
                                   tick_len: *const Struct_timeval)
     -> *mut Struct_ev_token_bucket_cfg;
    pub fn ev_token_bucket_cfg_free(cfg: *mut Struct_ev_token_bucket_cfg)
     -> ();
    pub fn bufferevent_set_rate_limit(bev: *mut Struct_bufferevent,
                                      cfg: *mut Struct_ev_token_bucket_cfg)
     -> ::libc::c_int;
    pub fn bufferevent_rate_limit_group_new(base: *mut Struct_event_base,
                                            cfg:
                                                *const Struct_ev_token_bucket_cfg)
     -> *mut Struct_bufferevent_rate_limit_group;
    pub fn bufferevent_rate_limit_group_set_cfg(arg1:
                                                    *mut Struct_bufferevent_rate_limit_group,
                                                arg2:
                                                    *const Struct_ev_token_bucket_cfg)
     -> ::libc::c_int;
    pub fn bufferevent_rate_limit_group_set_min_share(arg1:
                                                          *mut Struct_bufferevent_rate_limit_group,
                                                      arg2: ::libc::size_t)
     -> ::libc::c_int;
    pub fn bufferevent_rate_limit_group_free(arg1:
                                                 *mut Struct_bufferevent_rate_limit_group)
     -> ();
    pub fn bufferevent_add_to_rate_limit_group(bev: *mut Struct_bufferevent,
                                               g:
                                                   *mut Struct_bufferevent_rate_limit_group)
     -> ::libc::c_int;
    pub fn bufferevent_remove_from_rate_limit_group(bev:
                                                        *mut Struct_bufferevent)
     -> ::libc::c_int;
    pub fn bufferevent_get_read_limit(bev: *mut Struct_bufferevent)
     -> ::libc::ssize_t;
    pub fn bufferevent_get_write_limit(bev: *mut Struct_bufferevent)
     -> ::libc::ssize_t;
    pub fn bufferevent_get_max_to_read(bev: *mut Struct_bufferevent)
     -> ::libc::ssize_t;
    pub fn bufferevent_get_max_to_write(bev: *mut Struct_bufferevent)
     -> ::libc::ssize_t;
    pub fn bufferevent_rate_limit_group_get_read_limit(arg1:
                                                           *mut Struct_bufferevent_rate_limit_group)
     -> ::libc::ssize_t;
    pub fn bufferevent_rate_limit_group_get_write_limit(arg1:
                                                            *mut Struct_bufferevent_rate_limit_group)
     -> ::libc::ssize_t;
    pub fn bufferevent_decrement_read_limit(bev: *mut Struct_bufferevent,
                                            decr: ::libc::ssize_t) -> ::libc::c_int;
    pub fn bufferevent_decrement_write_limit(bev: *mut Struct_bufferevent,
                                             decr: ::libc::ssize_t) -> ::libc::c_int;
    pub fn bufferevent_rate_limit_group_decrement_read(arg1:
                                                           *mut Struct_bufferevent_rate_limit_group,
                                                       arg2: ::libc::ssize_t)
     -> ::libc::c_int;
    pub fn bufferevent_rate_limit_group_decrement_write(arg1:
                                                            *mut Struct_bufferevent_rate_limit_group,
                                                        arg2: ::libc::ssize_t)
     -> ::libc::c_int;
    pub fn bufferevent_rate_limit_group_get_totals(grp:
                                                       *mut Struct_bufferevent_rate_limit_group,
                                                   total_read_out:
                                                       *mut u64,
                                                   total_written_out:
                                                       *mut u64) -> ();
    pub fn bufferevent_rate_limit_group_reset_totals(grp:
                                                         *mut Struct_bufferevent_rate_limit_group)
     -> ();
}
